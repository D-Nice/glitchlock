#!/bin/bash
# ┏━┓┳  o┏┓┓┏━┓┳ ┳┳  ┏━┓┏━┓┳┏ 
# ┃ ┳┃  ┃ ┃ ┃  ┃━┫┃  ┃ ┃┃  ┣┻┓
# ┇━┛┇━┛┇ ┇ ┗━┛┇ ┻┇━┛┛━┛┗━┛┇ ┛
#
# author: xero <x@xero.nu> http://xero.nu
# contributors: D-Nice
# requires: i3lock-color (master), imagemagick, scrot

scrot /tmp/lock.png
convert /tmp/lock.png /tmp/lock.jpg
CTR=0
file=/tmp/lock.jpg
fileSize=$(wc -c < "$file")
headerSize=128
mkdir /tmp/glitchlock/ &> /dev/null
function datamoshF() {
  cp $file /tmp/glitchlock/lock$CTR.jpg &> /dev/null
  steps=$(shuf -i 10-100 -n 1)
  for i in $(seq 1 $steps); do
    skip=$(shuf -i "$headerSize"-"$fileSize" -n 1)
    if [[ $CTR -eq 0 ]]
    then
      FIRST=false
      skip=64
    fi
    # of=$file for progressive glitching
    dd of="/tmp/glitchlock/lock$CTR.jpg" if=/dev/urandom bs=7 seek=$skip count=1 conv=notrunc &> /dev/null
  done
  convert /tmp/glitchlock/lock$CTR.jpg /tmp/glitchlock/lock$CTR.png &> /dev/null
  rm /tmp/glitchlock/lock$CTR.jpg &> /dev/null
  CTR=$(( $CTR + 1 ))
}

# count of glitched images to create/use
glitches=$(shuf -i 10-15 -n 1)
for i in $(seq 1 $glitches);do datamoshF "$file"; done

PARAM=(--veriftext="" --wrongtext="" --noinputtext="" --slideshow-interval 0.19 --slideshow-random-selection --refresh-rate 0.1)

rm $file &> /dev/null

i3lock -n -u "${PARAM[@]}" -i "/tmp/glitchlock/" &> /dev/null
rm -r /tmp/glitchlock/ &> /dev/null
